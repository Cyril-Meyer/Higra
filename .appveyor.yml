build: false

branches:
  only:
  - master

platform:
  - x64

image:
  - Visual Studio 2019

environment:
  MINICONDA: C:\Miniconda36-x64
  CIBW_TEST_COMMAND: "pip install scipy scikit-learn && python -c \"import unittest;result=unittest.TextTestRunner().run(unittest.defaultTestLoader.discover('{project}/test/python/'));exit(0 if result.wasSuccessful() else 1)\""
  CIBW_BUILD_VERBOSITY: "1"
  CIBW_BEFORE_BUILD: "pip install cmake numpy==1.17.3"
  CIBW_SKIP: "*win32"
  CIBW_ENVIRONMENT: "HG_USE_TBB=1 TBB_DLL=C:/Miniconda36-x64/Library/bin/tbb.dll TBB_INCLUDE_DIR=C:/Miniconda36-x64/Library/include TBB_LIBRARY=C:/Miniconda36-x64/Library/lib"
  TWINE_USERNAME: "bperret"
  TWINE_PASSWORD:
    secure: gKT63gdRJqmmn+KGlXbzww==

  matrix:
    - CIBUILDWHEEL: 1
      TAG_SCENARIO: true
      CIBW_BUILD: "cp36*"
    - CIBUILDWHEEL: 1
      TAG_SCENARIO: true
      CIBW_BUILD: "cp37*"
    - CIBUILDWHEEL: 1
      TAG_SCENARIO: true
      CIBW_BUILD: "cp38*"
    - CIBUILDWHEEL: 1
      TAG_SCENARIO: false
      CIBW_BUILD: "cp39*"

for:
-
  # non-tagged scenario
  matrix:
    except:
      - TAG_SCENARIO: false

  skip_non_tags: true



init:
  - if "%APPVEYOR_BUILD_WORKER_IMAGE%" == "Visual Studio 2017" set VCVARPATH="C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Auxiliary\Build\vcvars64.bat"
  - if "%APPVEYOR_BUILD_WORKER_IMAGE%" == "Visual Studio 2019" set VCVARPATH="C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Auxiliary\Build\vcvars64.bat"
  - "%VCVARPATH%"
  - "set PATH=%MINICONDA%;%MINICONDA%\\Scripts;%MINICONDA%\\Library\\bin;%PATH%"

install:
  - conda config --set always_yes yes --set changeps1 no
  - conda info -a
#  - ps: $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))
  - if %CIBUILDWHEEL% == 0 (
    conda install cmake numpy==1.17.3 tbb-devel==2019.0 scipy scikit-learn -c conda-forge &&
      python setup.py bdist_wheel
      )  else (
    conda install tbb-devel==2019.0 &&
    pip install cibuildwheel==1.7.4 &&
        cibuildwheel --output-dir wheelhouse
      )


build_script:
  #- ps: $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))
  - if %CIBUILDWHEEL% == 0 (
      cd dist &&
      for  %%s in (higra*whl) do ( pip install %%s ) &&
      python -c "import unittest;result=unittest.TextTestRunner().run(unittest.defaultTestLoader.discover('c:\\projects\\higra-21ed3\\test\\python\\'));exit(0 if result.wasSuccessful() else 1)" &&
      cd ..\build &&
      cd temp* &&
      cd Release &&
      ctest -C Release -R Test_cpp -V
    ) else (
      if "%APPVEYOR_REPO_TAG%" == "true" (
        conda install twine &&
        twine upload  wheelhouse/*.whl
      )
    )
    #python -m pip install --upgrade pip &&
    #python -m pip install twine &&
    # --repository-url https://test.pypi.org/legacy/

artifacts:
  - path: "wheelhouse\\*.whl"
    name: Wheels